---
layout: post
title: "DesignPatterns - Design Pattern"
date: 2019-08-04 14:38:46
author: Ashe
categories:
- Python
- DesignPatterns
---

# Design Pattern

소프트웨어 개발 시 자주 마주치게되는 문제에 대한 일반적이고 재사용 가능한 해결책이다.

디자인패턴을 이용하면 코드가 명확해지고 단순하고 재사용성이 높아져 유지보수성이 높아진다.

<!--more-->

## 구성 요소

### Pattern name

패턴에 이름을 부여하여 설계의 의도를 표현하며 개발자간의 의사소통을 원활하게한다.

### Problem

패턴이 적용되어야할 필요가 있는 문제와 배경을 서술한다.

### Solution

설계를 구성하는요소들과 그 요소들 사이의 **관계, 책임, 협력** 관계를 기술한다.

구체적인 설계나 구현을 설명하지 않는다. 패턴은 단순히 여러 경우 적용가능한 **템플릿**이기 때문이다. 문제에 대한 추상적 설명을 제공하고 문제를 해결하기 위해 클래스나 객체들의 나열 방법을 제공한다.

### Consequence

디자인 패턴을 적용하여 얻는 결과와 장단점을 서술한다.

소프트웨어에서 비용과 효과를 측정하는 과정에서 결과는 가장 중요한 부분이다. 시간, 공간등의 중요 순위가 높은것의 효율을 따져 선택해야한다.


## 디자인 패턴의 분류

수많은 디자인 패턴이있지만 이를 구체화하고 체계화한 GoF는 디자인을 크게 세개의 목적으로로 분류했다.

### 목적

패턴이 무엇을 하는지 정의하는 것으로 `생성`, `구조`, `행위` 중의 한가지 목적을 가진다.

#### 생성 (Creational Pattern)

객체 생성에 관련된 패턴

객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.

#### 구조 (Structural)

클래스나 객체를 조합해 더 큰 구조를 만드는 패턴

서로 다른 인터페이스 2개의 인터페이스를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴이다.

#### 행위 (Behavioral)

객체나 클래스 사이 알고리즘이나 책임 분배에 관련된 패턴

한 객체가 혼자 수행할 수 없는 작업을 여러개의 객체로 어떻게 분배하는지, 또 그렇게 하면서도 객체 사이의 결합도를 최소화 하는 것에 중점을 둔다.
